##########################################################
# matchTemplate( bufferInfo imageBufferInfo, bufferInfo templateBufferInfo, bufferInfo errorBufferInfo )
# NOTE: struct bufferInfo { int *buffer, int width, int height, char* filename }
matchTemplate:	
	
	# TODO: write this function!
	
	lw $t0 0($a0) # load address of displayBuffer (0x10010000) into $t0
	lw $t1 4($a0) # load width of image (512) into $t1
	lw $t2 8($a0) # load height of image (128) into $t2
	lw $t3, 0($a1) # load base address of template buffer
	lw $t4, 0($a2) # load base address of error buffer

	add $t5, $zero, $zero 
	subi $a2, $t2, 7	# acceprable for convention?
	subi $a3, $t1, 7	#acceptable for convention?
	
y_loop:
	bge $t5, $a2, end_y_loop 
	add $t6, $zero, $zero # $t6 = x iterator
	
x_loop:
	bge $t6, $a3, next_y
	
	add $t7, $zero, $zero # initialize sum of abs difference
	
	add $t8, $t3, $zero 	# template address
	add $t9, $zero, $zero   # template row index
	
template_y_loop:
	bge $t9, 8, finish_pixel
	
	# loop through template y
	add $s0, $zero, $zero	# use $s0 respecting convention ?

template_x_loop:
	bge $s0, 8, next_row
	
	# Compute SAD template/image
	mul $s1, $t9, $t1     # y offset from template comparison
    	mul $s2, $t5, $t1     # y offset from pixel iteration
    	add $s1, $s1, $s2     # combine both y offsets
    	add $s1, $s1, $t6     # x offset
    	add $s1, $s1, $s0     # x offset from template loop 
	sll $s1, $s1, 2       # Convert to byte offset
    	add $s1, $s1, $t0     # add image base address

    	lbu $s2, 0($s1)        # load image pixel value
	
	
	# Template pixel access
	mul $s3, $t9, 8         # Row offset in the template (row * 8)
	add $s3, $s3, $s0       # Add column offset
	sll $s3, $s3, 2         # Convert to byte offset
	add $s3, $s3, $t8       # Add base address of the template buffer
	lbu $s4, 0($s3)         # load template pixel value

    	sub $s5, $s2, $s4     # Compute difference
    	abs $s5, $s5          # Take absolute value
    	add $t7, $t7, $s5     # Accumulate error

    	addi $s0, $s0, 1      # Increment column index
    	j template_x_loop
	
	
next_row:
	addi $t9, $t9, 1      # Increment row index
    	j template_y_loop

finish_pixel:
	# Need to store final error in error buffer 
	mul $s1, $t5, $t1     # Row offset
    	add $s1, $s1, $t6     # Add column offset
    	sll $s1, $s1, 2       # Convert to byte offset
    	add $s1, $s1, $t4     # Add error buffer base address
    	sw $t7, 0($s1)        # Store SAD

    	addi $t6, $t6, 1      # Increment x-coordinate
    	j x_loop
	
next_y:
	addi $t5, $t5, 1	# increment y
	j y_loop
	
end_y_loop:
	jr $ra	
	
##########################################################